// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuffers/employee.proto

/*
Package employee is a generated protocol buffer package.

It is generated from these files:
	protobuffers/employee.proto

It has these top-level messages:
	EmployeeDetails
	EmployeeID
*/
package employee

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmployeeDetails struct {
	FirstName string `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=lastName" json:"lastName,omitempty"`
}

func (m *EmployeeDetails) Reset()                    { *m = EmployeeDetails{} }
func (m *EmployeeDetails) String() string            { return proto.CompactTextString(m) }
func (*EmployeeDetails) ProtoMessage()               {}
func (*EmployeeDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EmployeeDetails) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *EmployeeDetails) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type EmployeeID struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *EmployeeID) Reset()                    { *m = EmployeeID{} }
func (m *EmployeeID) String() string            { return proto.CompactTextString(m) }
func (*EmployeeID) ProtoMessage()               {}
func (*EmployeeID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EmployeeID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*EmployeeDetails)(nil), "EmployeeDetails")
	proto.RegisterType((*EmployeeID)(nil), "EmployeeID")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Employee service

type EmployeeClient interface {
	GetEmployee(ctx context.Context, in *EmployeeID, opts ...grpc.CallOption) (*EmployeeDetails, error)
	CreateEmployee(ctx context.Context, in *EmployeeDetails, opts ...grpc.CallOption) (*EmployeeID, error)
}

type employeeClient struct {
	cc *grpc.ClientConn
}

func NewEmployeeClient(cc *grpc.ClientConn) EmployeeClient {
	return &employeeClient{cc}
}

func (c *employeeClient) GetEmployee(ctx context.Context, in *EmployeeID, opts ...grpc.CallOption) (*EmployeeDetails, error) {
	out := new(EmployeeDetails)
	err := grpc.Invoke(ctx, "/Employee/GetEmployee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) CreateEmployee(ctx context.Context, in *EmployeeDetails, opts ...grpc.CallOption) (*EmployeeID, error) {
	out := new(EmployeeID)
	err := grpc.Invoke(ctx, "/Employee/CreateEmployee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Employee service

type EmployeeServer interface {
	GetEmployee(context.Context, *EmployeeID) (*EmployeeDetails, error)
	CreateEmployee(context.Context, *EmployeeDetails) (*EmployeeID, error)
}

func RegisterEmployeeServer(s *grpc.Server, srv EmployeeServer) {
	s.RegisterService(&_Employee_serviceDesc, srv)
}

func _Employee_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Employee/GetEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).GetEmployee(ctx, req.(*EmployeeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Employee/CreateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).CreateEmployee(ctx, req.(*EmployeeDetails))
	}
	return interceptor(ctx, in, info, handler)
}

var _Employee_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Employee",
	HandlerType: (*EmployeeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmployee",
			Handler:    _Employee_GetEmployee_Handler,
		},
		{
			MethodName: "CreateEmployee",
			Handler:    _Employee_CreateEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuffers/employee.proto",
}

func init() { proto.RegisterFile("protobuffers/employee.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0x2a, 0x4d, 0x4b, 0x4b, 0x2d, 0x2a, 0xd6, 0x4f, 0xcd, 0x2d, 0xc8, 0xc9, 0xaf, 0x4c,
	0x4d, 0xd5, 0x03, 0x8b, 0x2a, 0x79, 0x73, 0xf1, 0xbb, 0x42, 0x45, 0x5c, 0x52, 0x4b, 0x12, 0x33,
	0x73, 0x8a, 0x85, 0x64, 0xb8, 0x38, 0xd3, 0x32, 0x8b, 0x8a, 0x4b, 0xfc, 0x12, 0x73, 0x53, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x10, 0x02, 0x42, 0x52, 0x5c, 0x1c, 0x39, 0x89, 0x50, 0x49,
	0x26, 0xb0, 0x24, 0x9c, 0xaf, 0x24, 0xc3, 0xc5, 0x05, 0x33, 0xcc, 0xd3, 0x45, 0x88, 0x8f, 0x8b,
	0x29, 0x33, 0x05, 0x6c, 0x00, 0x6b, 0x10, 0x53, 0x66, 0x8a, 0x51, 0x26, 0x17, 0x07, 0x4c, 0x56,
	0x48, 0x87, 0x8b, 0xdb, 0x3d, 0xb5, 0x04, 0xce, 0xe5, 0xd6, 0x43, 0xe8, 0x93, 0x12, 0xd0, 0x43,
	0x77, 0x91, 0x3e, 0x17, 0x9f, 0x73, 0x51, 0x6a, 0x62, 0x49, 0x2a, 0x5c, 0x03, 0x86, 0x1a, 0x29,
	0x64, 0x23, 0x92, 0xd8, 0xc0, 0x9e, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x30, 0xe1, 0x68,
	0x69, 0xfb, 0x00, 0x00, 0x00,
}
